Actividad 2:

1. Crear las siguiente Clase: Operaciones
	1.1 Crear los siguientes metodos:
		Suma, resta, multiplicacion y division (no debe ser posible dividir por 0)
	1.2 Realizar la implementacion de los metodos, es decir, debo poder sumar restar multiplicar y dividir
2. Crear una clase donde tenga 2 metodos implementados: Cronometro, temporizador.


PD: profe, quiero ser lo mas honesto posible. en el ejercicio 2 es un ejemplo de un cronometro que tome de la web, mi punto es el siguiente, en el IDE web con cualquier
codigo que ponia siempre mandaba este error ¨Main.java:75: error: '{' expected
public class Stopwatch.Java {¨


por ende, le queria pedir si me podria aclarar este tema, buen dia. 


-------------------------------------------------------------------------------DESARROLLO------------------------------------------------------------------------------------

public class  Operacion {

  int suma ;
  int resta ;
  int multiplicacion ;
  int division ;
  boolean noDividirEntreCero ;



  public Operacion ( ) {
		

  }



  public int sumar (int suma , int suma1 ) {
		print(“Sumar” + suma+suma1 );
		return suma+suma1;

  }

  public int restar(int resta1, int resta2){
		print(“restar” - resta1-resta2 );
		return resta1-resta2;

  }

  public int multiplicar (int multiplicacion1, int multiplicacion2 ) {
		print(“multiplicar” * multiplicacion1*multiplicacion2 );
		return multiplicacion1*multiplicacion2;

  }

  public int dividir (int dividir1, int dividir2 ) {
	  
		if (dividir1 >= 1 & dividir >= 1 ) 
		
		print(“dividir” / dividir1/dividir2 );
		return dividir1/dividir2;
		
		if (dividir1 <=0 & dividir2 <=0) 
			
		print(“error”) 
		
  }



------------------------------------------------------------------------------------------------------------------------------------------------------------------

ejercicio2


import java.math.BigInteger;

class Stopwatch1 {
    private final long nanoSecondsPerMillisecond = 1000000;
    private final long nanoSecondsPerSecond = 1000000000;
    private final long nanoSecondsPerMinute = 60000000000L;
    private final long nanoSecondsPerHour = 3600000000000L;

    private long stopWatchStartTime = 0;
    private long stopWatchStopTime = 0;
    private boolean stopWatchRunning = false;


    public void start() {
        this.stopWatchStartTime = System.nanoTime();
        this.stopWatchRunning = true;
    }


    public void stop() {
        this.stopWatchStopTime = System.nanoTime();
        this.stopWatchRunning = false;
    }


    public long getElapsedMilliseconds() {
        long elapsedTime;

        if (stopWatchRunning)
            elapsedTime = (System.nanoTime() - stopWatchStartTime);
        else
            elapsedTime = (stopWatchStopTime - stopWatchStartTime);

        return elapsedTime / nanoSecondsPerMillisecond;
    }


    public long getElapsedSeconds() {
        long elapsedTime;

        if (stopWatchRunning)
            elapsedTime = (System.nanoTime() - stopWatchStartTime);
        else
            elapsedTime = (stopWatchStopTime - stopWatchStartTime);

        return elapsedTime / nanoSecondsPerSecond;
    }


    public long getElapsedMinutes() {
        long elapsedTime;
        if (stopWatchRunning)
            elapsedTime = (System.nanoTime() - stopWatchStartTime);
        else
            elapsedTime = (stopWatchStopTime - stopWatchStartTime);

        return elapsedTime / nanoSecondsPerMinute;
    }


    public long getElapsedHours() {
        long elapsedTime;
        if (stopWatchRunning)
            elapsedTime = (System.nanoTime() - stopWatchStartTime);
        else
            elapsedTime = (stopWatchStopTime - stopWatchStartTime);

        return elapsedTime / nanoSecondsPerHour;
    }


}


public class Stopwatch.Java {

    public static void main(String[] args) {

        Stopwatch1 stopwatch1 = new Stopwatch1();
        stopwatch1.start();
        Fibonacci(45);
        stopwatch1.stop();


        System.out.println("Elapsed time in milliseconds: "
                + stopwatch1.getElapsedMilliseconds());

        System.out.println("Elapsed time in seconds: "
                + stopwatch1.getElapsedSeconds());

        System.out.println("Elapsed time in minutes: "
                + stopwatch1.getElapsedMinutes());

        System.out.println("Elapsed time in hours: "
                + stopwatch1.getElapsedHours());

    }

    private static BigInteger Fibonacci(int n) {
        if (n < 2)
            return BigInteger.ONE;
        else
            return Fibonacci(n - 1).add(Fibonacci(n - 2)); 
    }
}



















